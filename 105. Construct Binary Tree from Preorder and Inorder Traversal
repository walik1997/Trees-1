#O(N)
#O(N)
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder:
            return None
        self.map={}
        i=0
        for val in inorder:
            self.map[val]=i
            i+=1
        self.idx=0
        return self.helper(preorder,0,len(preorder)-1)
        
    def helper(self,preorder,start,end):
        if start>end:
            return None
        root_val=preorder[self.idx]
        root=TreeNode(root_val)
        partidx=self.map[root_val]
        self.idx+=1
        root.left=self.helper(preorder,start,partidx-1)
        root.right=self.helper(preorder,partidx+1,end)
        return root

        
